[
    {
        "title": "Basic array operations",
        "cpp_code": "vector<int> reverseArray(vector<int>& arr) {\n    vector<int> result;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        result.push_back(arr[i]);\n    }\n    return result;\n}",
        "translated_python_code": "def reverseArray(arr):\n    result = []\n    for i in range(len(arr) - 1, -1, -1):\n        result.append(arr[i])\n    return result",
        "expected_python_code": "def reverse_array(arr):\n    return arr[::-1]",
        "match_with_reference": false,
        "success": true,
        "error": null
    },
    {
        "title": "String manipulation",
        "cpp_code": "string reverseString(string str) {\n    int n = str.length();\n    for(int i = 0; i < n/2; i++) {\n        swap(str[i], str[n-1-i]);\n    }\n    return str;\n}",
        "translated_python_code": "def reverseString(str):\n    n = len(str)\n    for i in range(n//2):\n        str[i], str[n-1-i] = str[n-1-i], str[i]\n    return str",
        "expected_python_code": "def reverse_string(string):\n    return string[::-1]",
        "match_with_reference": false,
        "success": true,
        "error": null
    },
    {
        "title": "Mathematical operations",
        "cpp_code": "int factorial(int n) {\n    if(n <= 1) return 1;\n    return n * factorial(n-1);\n}",
        "translated_python_code": "def factorial(n):\n    if n <= 1:\n        return 1\n    else:\n        return n * factorial(n-1)",
        "expected_python_code": "def factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)",
        "match_with_reference": false,
        "success": true,
        "error": null
    },
    {
        "title": "Search algorithm",
        "cpp_code": "int binarySearch(vector<int>& arr, int target) {\n    int left = 0;\n    int right = arr.size() - 1;\n    \n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if(arr[mid] == target) return mid;\n        if(arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}",
        "translated_python_code": "def binary_search(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1",
        "expected_python_code": "def binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1",
        "match_with_reference": false,
        "success": true,
        "error": null
    },
    {
        "title": "Data structure operations",
        "cpp_code": "struct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nListNode* reverseLinkedList(ListNode* head) {\n    ListNode *prev = NULL;\n    ListNode *curr = head;\n    while(curr != NULL) {\n        ListNode *next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}",
        "translated_python_code": "class ListNode:\n    def __init__(self, val):\n        self.val = val\n        self.next = None\n\ndef reverse_linked_list(head):\n    prev = None\n    curr = head\n    while curr is not None:\n        next = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next\n    return prev",
        "expected_python_code": "class ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_linked_list(head):\n    prev = None\n    curr = head\n    while curr:\n        next_temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_temp\n    return prev",
        "match_with_reference": false,
        "success": true,
        "error": null
    }
]