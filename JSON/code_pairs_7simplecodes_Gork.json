[
    {
        "title": "Basic array operations",
        "cpp_code": "\nvector<int> reverseArray(vector<int>& arr) {\n    vector<int> result;\n    for(int i = arr.size() - 1; i >= 0; i--) {\n        result.push_back(arr[i]);\n    }\n    return result;\n}",
        "python_code": "\ndef reverse_array(arr):\n    return arr[::-1]\n"
    },
    {
        "title": "String manipulation",
        "cpp_code": "\nstring reverseString(string str) {\n    int n = str.length();\n    for(int i = 0; i < n/2; i++) {\n        swap(str[i], str[n-1-i]);\n    }\n    return str;\n}",
        "python_code": "\ndef reverse_string(string):\n    return string[::-1]\n"
    },
    {
        "title": "Mathematical operations",
        "cpp_code": "\nint factorial(int n) {\n    if(n <= 1) return 1;\n    return n * factorial(n-1);\n}",
        "python_code": "\ndef factorial(n):\n    if n <= 1:\n        return 1\n    return n * factorial(n-1)\n"
    },
    {
        "title": "Search algorithm",
        "cpp_code": "\nint binarySearch(vector<int>& arr, int target) {\n    int left = 0;\n    int right = arr.size() - 1;\n    \n    while(left <= right) {\n        int mid = left + (right - left) / 2;\n        if(arr[mid] == target) return mid;\n        if(arr[mid] < target) left = mid + 1;\n        else right = mid - 1;\n    }\n    return -1;\n}",
        "python_code": "\ndef binary_search(arr, target):\n    left, right = 0, len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            return mid\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return -1\n"
    },
    {
        "title": "Data structure operations",
        "cpp_code": "\nstruct ListNode {\n    int val;\n    ListNode* next;\n    ListNode(int x) : val(x), next(NULL) {}\n};\n\nListNode* reverseLinkedList(ListNode* head) {\n    ListNode *prev = NULL;\n    ListNode *curr = head;\n    while(curr != NULL) {\n        ListNode *next = curr->next;\n        curr->next = prev;\n        prev = curr;\n        curr = next;\n    }\n    return prev;\n}",
        "python_code": "\nclass ListNode:\n    def __init__(self, val=0, next=None):\n        self.val = val\n        self.next = next\n\ndef reverse_linked_list(head):\n    prev = None\n    curr = head\n    while curr:\n        next_temp = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_temp\n    return prev\n"
    },
    {
        "title": "Array sorting",
        "cpp_code": "\nvoid bubbleSort(vector<int>& arr) {\n    int n = arr.size();\n    for(int i = 0; i < n-1; i++) {\n        for(int j = 0; j < n-i-1; j++) {\n            if(arr[j] > arr[j+1]) {\n                swap(arr[j], arr[j+1]);\n            }\n        }\n    }\n}",
        "python_code": "\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n    return arr\n"
    },
    {
        "title": "Matrix operations",
        "cpp_code": "\nvector<vector<int>> transposeMatrix(vector<vector<int>>& matrix) {\n    int rows = matrix.size();\n    int cols = matrix[0].size();\n    vector<vector<int>> result(cols, vector<int>(rows));\n    \n    for(int i = 0; i < rows; i++) {\n        for(int j = 0; j < cols; j++) {\n            result[j][i] = matrix[i][j];\n        }\n    }\n    return result;\n}",
        "python_code": "\ndef transpose_matrix(matrix):\n    return [[matrix[j][i] for j in range(len(matrix))] for i in range(len(matrix[0]))]\n"
    },
    {
        "title": "Stack implementation",
        "cpp_code": "\nclass Stack {\nprivate:\n    vector<int> items;\npublic:\n    void push(int x) {\n        items.push_back(x);\n    }\n    int pop() {\n        if(!items.empty()) {\n            int val = items.back();\n            items.pop_back();\n            return val;\n        }\n        return -1;\n    }\n    bool isEmpty() {\n        return items.empty();\n    }\n};",
        "python_code": "\nclass Stack:\n    def __init__(self):\n        self.items = []\n    \n    def push(self, x):\n        self.items.append(x)\n    \n    def pop(self):\n        if self.items:\n            return self.items.pop()\n        return -1\n    \n    def is_empty(self):\n        return len(self.items) == 0\n"
    }
]